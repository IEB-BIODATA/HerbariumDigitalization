# Generated by Django 5.1.6 on 2025-08-06 23:07

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('catalog', '0021_alter_downloadsearchregistration_format'),
    ]

    operations = [
        migrations.CreateModel(
            name='References',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(blank=True, null=True, verbose_name='Title')),
                ('journal', models.CharField(blank=True, max_length=300, null=True, verbose_name='Journal')),
                ('volume', models.IntegerField(blank=True, null=True, verbose_name='Volume')),
                ('issue', models.IntegerField(blank=True, null=True, verbose_name='Issue')),
                ('first_page', models.IntegerField(blank=True, null=True, verbose_name='First Page')),
                ('last_page', models.IntegerField(blank=True, null=True, verbose_name='Last Page')),
                ('year', models.IntegerField(blank=True, null=True, verbose_name='Year')),
            ],
        ),
        migrations.RemoveField(
            model_name='species',
            name='pages',
        ),
        migrations.RemoveField(
            model_name='species',
            name='publication',
        ),
        migrations.RemoveField(
            model_name='species',
            name='volume',
        ),
        migrations.RemoveField(
            model_name='species',
            name='year',
        ),
        migrations.AddField(
            model_name='classname',
            name='references',
            field=models.ManyToManyField(blank=True, to='catalog.references', verbose_name='References'),
        ),
        migrations.AddField(
            model_name='division',
            name='references',
            field=models.ManyToManyField(blank=True, to='catalog.references', verbose_name='References'),
        ),
        migrations.AddField(
            model_name='family',
            name='references',
            field=models.ManyToManyField(blank=True, to='catalog.references', verbose_name='References'),
        ),
        migrations.AddField(
            model_name='genus',
            name='references',
            field=models.ManyToManyField(blank=True, to='catalog.references', verbose_name='References'),
        ),
        migrations.AddField(
            model_name='kingdom',
            name='references',
            field=models.ManyToManyField(blank=True, to='catalog.references', verbose_name='References'),
        ),
        migrations.AddField(
            model_name='order',
            name='references',
            field=models.ManyToManyField(blank=True, to='catalog.references', verbose_name='References'),
        ),
        migrations.AddField(
            model_name='species',
            name='references',
            field=models.ManyToManyField(blank=True, to='catalog.references', verbose_name='References'),
        ),
        migrations.AddField(
            model_name='synonymy',
            name='references',
            field=models.ManyToManyField(blank=True, to='catalog.references', verbose_name='References'),
        ),
        migrations.RunSQL("""
            DROP MATERIALIZED VIEW IF EXISTS catalog_view;
        """),
        migrations.RunSQL("""
            CREATE MATERIALIZED VIEW catalog_view AS
    SELECT species.id,
           species.id_taxa,
           species.unique_taxon_id,
           species.taxon_id,
           kingdom.id      AS kingdom_id,
           kingdom.name    AS kingdom,
           division.id     AS division_id,
           division.name   AS division,
           classname.id    AS classname_id,
           classname.name  AS classname,
           "order".id      AS order_id,
           "order".name    AS "order",
           family.id       AS family_id,
           family.name     AS family,
           genus.id        AS genus_id,
           genus.name      AS genus,
           species.scientific_name,
           species.scientific_name_full,
           species.specific_epithet,
           species.scientific_name_authorship,
           species.subspecies,
           species.ssp_authorship,
           species.variety,
           species.variety_authorship,
           species.form,
           species.form_authorship,
           species.in_argentina,
           species.in_bolivia,
           species.in_peru,
           status.name     AS status,
           status.name_es  AS status_es,
           status.name_en  AS status_en,
           species.minimum_height,
           species.maximum_height,
           species.notes,
           species.type_id,
           species.determined,
           species.id_taxa_origin,
           species.created_at,
           species.updated_at,
           "user".username AS created_by
    FROM catalog_species species
         JOIN auth_user "user" ON species.created_by_id = "user".id
         JOIN catalog_genus genus ON species.genus_id = genus.id
         JOIN catalog_family family ON genus.family_id = family.id
         JOIN catalog_order "order" ON family.order_id = "order".id
         JOIN catalog_classname classname ON "order".classname_id = classname.id
         JOIN catalog_division division ON classname.division_id = division.id
         JOIN catalog_kingdom kingdom ON division.kingdom_id = kingdom.id
         LEFT JOIN catalog_status status ON species.status_id = status.id;
        """),
    migrations.RunSQL("""
        CREATE UNIQUE INDEX catalog_view_id_idx
        ON catalog_view (id);
    """),
    ]
