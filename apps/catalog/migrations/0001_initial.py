# Generated by Django 4.2.6 on 2023-10-21 01:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CatalogView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('id_taxa', models.IntegerField()),
                ('kingdom', models.CharField(blank=True, max_length=300, null=True)),
                ('division', models.CharField(blank=True, max_length=300, null=True)),
                ('class_name', models.CharField(blank=True, max_length=300, null=True)),
                ('order', models.CharField(blank=True, db_column='order', max_length=300, null=True)),
                ('family', models.CharField(blank=True, max_length=300, null=True)),
                ('genus', models.CharField(blank=True, max_length=300, null=True)),
                ('scientific_name', models.CharField(blank=True, help_text='sp', max_length=500, null=True)),
                ('scientific_name_full', models.CharField(blank=True, help_text='spCompleto', max_length=800, null=True)),
                ('specific_epithet', models.CharField(blank=True, help_text='EpitetoEspecifico', max_length=300, null=True)),
                ('scientific_name_authorship', models.CharField(blank=True, help_text='AutoresSp', max_length=500, null=True)),
                ('subspecies', models.CharField(blank=True, max_length=300, null=True)),
                ('ssp_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('variety', models.CharField(blank=True, max_length=300, null=True)),
                ('variety_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('form', models.CharField(blank=True, max_length=300, null=True)),
                ('form_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('in_argentina', models.BooleanField(default=False)),
                ('in_bolivia', models.BooleanField(default=False)),
                ('in_peru', models.BooleanField(default=False)),
                ('status', models.CharField(blank=True, max_length=300, null=True)),
                ('minimum_height', models.IntegerField(blank=True, null=True)),
                ('maximum_height', models.IntegerField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, max_length=1000, null=True)),
                ('type_id', models.CharField(blank=True, max_length=300, null=True)),
                ('publication', models.CharField(blank=True, max_length=300, null=True)),
                ('volume', models.CharField(blank=True, max_length=300, null=True)),
                ('pages', models.CharField(blank=True, max_length=300, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('determined', models.BooleanField(default=False)),
                ('id_taxa_origin', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField()),
                ('created_by', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'catalog_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RegionDistributionView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('specie_id', models.IntegerField()),
                ('id_taxa', models.IntegerField()),
                ('specie_scientific_name', models.CharField(blank=True, help_text='sp', max_length=500, null=True)),
                ('region_name', models.CharField(blank=True, max_length=300, null=True)),
                ('region_key', models.CharField(blank=True, max_length=3, null=True)),
            ],
            options={
                'db_table': 'region_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SynonymyView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('specie_id', models.IntegerField()),
                ('id_taxa', models.IntegerField()),
                ('specie_scientific_name', models.CharField(blank=True, help_text='sp', max_length=500, null=True)),
                ('synonymy_id', models.IntegerField()),
                ('scientific_name', models.CharField(blank=True, max_length=300, null=True)),
                ('scientific_name_full', models.CharField(blank=True, max_length=800, null=True)),
                ('genus', models.CharField(blank=True, max_length=300, null=True)),
                ('specific_epithet', models.CharField(blank=True, max_length=300, null=True)),
                ('scientific_name_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('subspecies', models.CharField(blank=True, max_length=300, null=True)),
                ('ssp_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('variety', models.CharField(blank=True, max_length=300, null=True)),
                ('variety_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('form', models.CharField(blank=True, max_length=300, null=True)),
                ('form_authorship', models.CharField(blank=True, max_length=300, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField()),
                ('created_by', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'synonymy_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClassName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Classes',
                'db_table': 'catalog_class_name',
                'ordering': ['name'],
                'default_related_name': 'class_name',
            },
        ),
        migrations.CreateModel(
            name='CommonName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Common Names',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ConservationState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('key', models.CharField(blank=True, max_length=3, null=True)),
                ('order', models.IntegerField(blank=True, db_column='order', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Conservation States',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Cycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Ciclos',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EnvironmentalHabit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('female_name', models.CharField(blank=True, max_length=100, null=True)),
                ('male_name', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Environmental Habits',
                'ordering': ['female_name'],
            },
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Familys',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Genus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('family', models.ForeignKey(blank=True, help_text='Familia', null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.family')),
            ],
            options={
                'verbose_name_plural': 'Genus',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlantHabit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Plant Habits',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('key', models.CharField(blank=True, max_length=3, null=True)),
                ('order', models.IntegerField(blank=True, db_column='order', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Regions',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Synonymy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scientific_name', models.CharField(blank=True, max_length=300, null=True)),
                ('scientific_name_db', models.CharField(blank=True, max_length=300, null=True)),
                ('scientific_name_full', models.CharField(blank=True, max_length=800, null=True)),
                ('genus', models.CharField(blank=True, max_length=300, null=True)),
                ('specific_epithet', models.CharField(blank=True, help_text='EpitetoEspecifico', max_length=300, null=True)),
                ('scientific_name_authorship', models.CharField(blank=True, help_text='AutoresSp', max_length=500, null=True)),
                ('subspecies', models.CharField(blank=True, max_length=300, null=True)),
                ('ssp_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('variety', models.CharField(blank=True, max_length=300, null=True)),
                ('variety_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('form', models.CharField(blank=True, max_length=300, null=True)),
                ('form_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Synonyms',
                'ordering': ['scientific_name'],
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Status',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scientific_name', models.CharField(blank=True, max_length=300, null=True)),
                ('scientific_name_db', models.CharField(blank=True, max_length=300, null=True)),
                ('scientific_name_full', models.CharField(blank=True, max_length=800, null=True)),
                ('specific_epithet', models.CharField(blank=True, help_text='EpitetoEspecifico', max_length=300, null=True)),
                ('scientific_name_authorship', models.CharField(blank=True, help_text='AutoresSp', max_length=500, null=True)),
                ('subspecies', models.CharField(blank=True, max_length=300, null=True)),
                ('ssp_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('variety', models.CharField(blank=True, max_length=300, null=True)),
                ('variety_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('form', models.CharField(blank=True, max_length=300, null=True)),
                ('form_authorship', models.CharField(blank=True, max_length=500, null=True)),
                ('id_taxa', models.IntegerField(blank=True, null=True)),
                ('in_argentina', models.BooleanField(default=False)),
                ('in_bolivia', models.BooleanField(default=False)),
                ('in_peru', models.BooleanField(default=False)),
                ('minimum_height', models.IntegerField(blank=True, null=True)),
                ('maximum_height', models.IntegerField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, max_length=1000, null=True)),
                ('type_id', models.CharField(blank=True, max_length=300, null=True)),
                ('publication', models.CharField(blank=True, max_length=300, null=True)),
                ('volume', models.CharField(blank=True, max_length=300, null=True)),
                ('pages', models.CharField(blank=True, max_length=300, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('id_mma', models.IntegerField(blank=True, null=True)),
                ('determined', models.BooleanField(default=False)),
                ('id_taxa_origin', models.IntegerField(blank=True, null=True)),
                ('common_names', models.ManyToManyField(blank=True, to='catalog.commonname')),
                ('conservation_state', models.ManyToManyField(blank=True, to='catalog.conservationstate')),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('cycle', models.ManyToManyField(blank=True, db_column='cycle', to='catalog.cycle')),
                ('env_habit', models.ManyToManyField(blank=True, db_column='environmental_habit', to='catalog.environmentalhabit')),
                ('genus', models.ForeignKey(blank=True, help_text='Género', null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.genus')),
                ('plant_habit', models.ManyToManyField(blank=True, db_column='plant_habit', to='catalog.planthabit')),
                ('region', models.ManyToManyField(blank=True, db_column='region', to='catalog.region')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.status')),
                ('synonyms', models.ManyToManyField(blank=True, to='catalog.synonymy')),
            ],
            options={
                'verbose_name_plural': 'Species',
                'ordering': ['scientific_name'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('class_name', models.ForeignKey(blank=True, help_text='Clase', null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.classname')),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Orders',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Kingdom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Kingdoms',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='family',
            name='order',
            field=models.ForeignKey(blank=True, db_column='order', help_text='order', null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.order'),
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('kingdom', models.ForeignKey(blank=True, help_text='Reino', null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.kingdom')),
            ],
            options={
                'verbose_name_plural': 'Divisions',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='classname',
            name='division',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.division'),
        ),
        migrations.CreateModel(
            name='Binnacle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_update', models.CharField(blank=True, help_text='tipo', max_length=100, null=True)),
                ('model', models.CharField(blank=True, help_text='modelo', max_length=100, null=True)),
                ('description', models.CharField(blank=True, help_text='descripción', max_length=1000, null=True)),
                ('note', models.CharField(blank=True, help_text='descripción', max_length=1000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Binnacles',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.RunSQL(
            """
            CREATE MATERIALIZED VIEW catalog_view AS
            SELECT species.id,
                   species.id_taxa,
                   kingdom.name    AS kingdom,
                   division.name   AS division,
                   class.name      AS class_name,
                   "order".name    AS "order",
                   family.name     AS family,
                   genus.name      AS genus,
                   species.scientific_name,
                   species.scientific_name_full,
                   species.specific_epithet,
                   species.scientific_name_authorship,
                   species.subspecies,
                   species.ssp_authorship,
                   species.variety,
                   species.variety_authorship,
                   species.form,
                   species.form_authorship,
                   species.in_argentina,
                   species.in_bolivia,
                   species.in_peru,
                   status.name     AS status,
                   species.minimum_height,
                   species.maximum_height,
                   species.notes,
                   species.type_id,
                   species.publication,
                   species.volume,
                   species.pages,
                   species.year,
                   species.determined,
                   species.id_taxa_origin,
                   species.created_at,
                   species.updated_at,
                   "user".username AS created_by
            FROM catalog_species species
                 JOIN auth_user "user" ON species.created_by_id = "user".id
                 JOIN catalog_genus genus ON species.genus_id = genus.id
                 JOIN catalog_family family ON genus.family_id = family.id
                 JOIN catalog_order "order" ON family."order" = "order".id
                 JOIN catalog_class_name class ON "order".class_name_id = class.id
                 JOIN catalog_division division ON class.division_id = division.id
                 JOIN catalog_kingdom kingdom ON division.kingdom_id = kingdom.id
                 LEFT JOIN catalog_status status ON species.status_id = status.id;
            """
        ),
        migrations.RunSQL(
            """
            CREATE UNIQUE INDEX catalog_view_id_idx
                ON catalog_view (id);
            """
        ),
        migrations.RunSQL(
            """
            CREATE MATERIALIZED VIEW synonymy_view AS
            SELECT synonymy.id,
                   species.id               AS specie_id,
                   species.id_taxa,
                   species.scientific_name AS specie_scientific_name,
                   species_synonymy.id      AS synonymy_id,
                   synonymy.scientific_name,
                   synonymy.scientific_name_full,
                   synonymy.genus,
                   synonymy.specific_epithet,
                   synonymy.scientific_name_authorship,
                   synonymy.subspecies,
                   synonymy.ssp_authorship,
                   synonymy.variety,
                   synonymy.variety_authorship,
                   synonymy.form,
                   synonymy.form_authorship,
                   synonymy.created_at,
                   synonymy.updated_at,
                   "user".username          AS created_by
            FROM catalog_synonymy synonymy
                LEFT JOIN catalog_species_synonyms species_synonymy ON species_synonymy.synonymy_id = synonymy.id
                LEFT JOIN catalog_species species ON species_synonymy.species_id = species.id
                LEFT JOIN auth_user "user" ON synonymy.created_by_id = "user".id;
            """
        ),
        migrations.RunSQL(
            """
            CREATE UNIQUE INDEX synonymy_view_id_idx
                ON synonymy_view (synonymy_id);
            """
        ),
        migrations.RunSQL(
            """
            CREATE MATERIALIZED VIEW region_view AS
            SELECT species_region.id,
                   species.id               AS specie_id,
                   species.id_taxa,
                   species.scientific_name AS specie_scientific_name,
                   region.name              AS region_name,
                   region.key               AS region_key
            FROM catalog_species_region species_region
                 JOIN catalog_species species ON species_region.species_id = species.id
                 JOIN catalog_region region ON species_region.region_id = region.id
            ORDER BY species_region.id;
            """
        ),
        migrations.RunSQL(
            """
            CREATE UNIQUE INDEX region_distribution_view_id_idx
                ON region_view (id);
            """
        ),
    ]
