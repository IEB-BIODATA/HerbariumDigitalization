# Generated by Django 5.1.6 on 2025-02-18 22:06

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('digitalization', '0010_typestatus'),
    ]

    operations = [
        migrations.CreateModel(
            name='GeographicCoverage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('west_bounding', models.FloatField(verbose_name='West Bounding')),
                ('east_bounding', models.FloatField(verbose_name='East Bounding')),
                ('north_bounding', models.FloatField(verbose_name='North Bounding')),
                ('south_bounding', models.FloatField(verbose_name='South Bounding')),
                ('description', models.TextField(verbose_name='Description')),
                ('bound', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326, verbose_name='Bound')),
            ],
            options={
                'verbose_name': 'Geographic Coverage',
                'verbose_name_plural': 'Geographic Coverages',
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(max_length=255, verbose_name='Keyword')),
                ('type', models.CharField(blank=True, max_length=255, null=True, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Keyword',
                'verbose_name_plural': 'Keywords',
            },
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Method',
                'verbose_name_plural': 'Methods',
            },
        ),
        migrations.CreateModel(
            name='ResponsibleParty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Last Name')),
                ('position', models.CharField(blank=True, max_length=255, null=True, verbose_name='Position')),
                ('organization', models.CharField(blank=True, max_length=255, null=True, verbose_name='Organization')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='City')),
                ('country', models.CharField(blank=True, max_length=255, null=True, verbose_name='Country')),
                ('postal_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Postal Code')),
                ('phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='Phone')),
                ('mail', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('web_page', models.URLField(blank=True, null=True, verbose_name='Web Page')),
            ],
            options={
                'verbose_name': 'Responsible Party',
                'verbose_name_plural': 'Responsible Parties',
            },
        ),
        migrations.CreateModel(
            name='TaxonID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taxon_id', models.CharField(max_length=255, verbose_name='Taxon ID')),
                ('provider', models.CharField(blank=True, max_length=255, null=True, verbose_name='Provider')),
            ],
            options={
                'verbose_name': 'Taxon ID',
                'verbose_name_plural': 'Taxon IDs',
            },
        ),
        migrations.CreateModel(
            name='EMLDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('abstract', models.TextField(blank=True, null=True, verbose_name='Abstract')),
                ('language', models.CharField(choices=[('es', 'Spanish'), ('en', 'English')], verbose_name='Language')),
                ('intellectual_rights', models.TextField(verbose_name='Intellectual Rights')),
                ('licensed', models.ManyToManyField(to='digitalization.licence', verbose_name='Licenced')),
                ('geographic_coverage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metadata.geographiccoverage', verbose_name='Geographic Coverage')),
            ],
            options={
                'verbose_name': 'EML Dataset',
                'verbose_name_plural': 'EML Datasets',
            },
        ),
        migrations.CreateModel(
            name='EML',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('package_id', models.CharField(verbose_name='Package ID')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metadata.emldataset', verbose_name='EML Dataset')),
            ],
            options={
                'verbose_name': 'EML',
                'verbose_name_plural': 'EML',
            },
        ),
        migrations.CreateModel(
            name='KeywordSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thesaurus', models.CharField(blank=True, null=True, verbose_name='Thesaurus')),
                ('keywords', models.ManyToManyField(to='metadata.keyword', verbose_name='Keywords')),
            ],
            options={
                'verbose_name': 'Keyword Set',
                'verbose_name_plural': 'Keyword Sets',
            },
        ),
        migrations.AddField(
            model_name='emldataset',
            name='keyword_set',
            field=models.ManyToManyField(to='metadata.keywordset', verbose_name='Keyword Set'),
        ),
        migrations.AddField(
            model_name='emldataset',
            name='method',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='method', to='metadata.method', verbose_name='Method'),
        ),
        migrations.CreateModel(
            name='ProcedureStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.IntegerField(verbose_name='Step')),
                ('description', models.TextField(verbose_name='Description')),
                ('sub_step', models.ManyToManyField(to='metadata.procedurestep', verbose_name='Sub Step')),
            ],
            options={
                'verbose_name': 'Procedure Step',
                'verbose_name_plural': 'Procedure Steps',
            },
        ),
        migrations.AddField(
            model_name='method',
            name='steps',
            field=models.ManyToManyField(to='metadata.procedurestep', verbose_name='Steps'),
        ),
        migrations.AddField(
            model_name='emldataset',
            name='contact',
            field=models.ManyToManyField(related_name='contact', to='metadata.responsibleparty', verbose_name='Contact'),
        ),
        migrations.AddField(
            model_name='emldataset',
            name='creator',
            field=models.ManyToManyField(related_name='creator', to='metadata.responsibleparty', verbose_name='Creator'),
        ),
        migrations.AddField(
            model_name='emldataset',
            name='metadata_provider',
            field=models.ManyToManyField(related_name='metadata_provider', to='metadata.responsibleparty', verbose_name='Metadata Provider'),
        ),
        migrations.CreateModel(
            name='AssociatedParty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.SmallIntegerField(choices=[(0, 'author'), (1, 'contentProvider'), (2, 'custodianSteward'), (3, 'distributor'), (4, 'editor'), (5, 'metadataProvider'), (6, 'originator'), (7, 'pointOfContact'), (8, 'principalInvestigator'), (9, 'processor'), (10, 'publisher'), (11, 'user')], verbose_name='Role')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metadata.emldataset', verbose_name='Dataset')),
                ('responsible_party', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metadata.responsibleparty', verbose_name='Responsible Party')),
            ],
            options={
                'verbose_name': 'Associated Party',
                'verbose_name_plural': 'Associated Parties',
            },
        ),
        migrations.CreateModel(
            name='TaxonomicClassification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank_name', models.CharField(max_length=255, verbose_name='Rank')),
                ('rank_value', models.CharField(max_length=255, verbose_name='Rank Value')),
                ('common_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Common Name')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='metadata.taxonomicclassification', verbose_name='Parent')),
                ('taxon_ids', models.ManyToManyField(to='metadata.taxonid', verbose_name='Taxon IDs')),
            ],
            options={
                'verbose_name': 'Taxonomic Classification',
                'verbose_name_plural': 'Taxonomic Classifications',
            },
        ),
        migrations.CreateModel(
            name='TaxonomicCoverage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('general', models.TextField(verbose_name='General Coverage')),
                ('taxonomic_classification', models.ManyToManyField(to='metadata.taxonomicclassification', verbose_name='Taxonomic Classification')),
            ],
            options={
                'verbose_name': 'Taxonomic Coverage',
                'verbose_name_plural': 'Taxonomic Coverages',
            },
        ),
        migrations.AddField(
            model_name='emldataset',
            name='taxonomic_coverage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metadata.taxonomiccoverage', verbose_name='Taxonomic Coverage'),
        ),
    ]
